# Try to find all packages that we need/support
find_package(PortAudio)
find_package(Mad)
find_package(LibOGG)
find_package(LibVorbis)
find_package(LibFaad2)
find_package(LibFlac)
find_package(LibSamplerate)
find_package(LibDUMB)

SET(BACKEND_SOURCE_FILES "")
SET(DECODER_SOURCE_FILES "")
SET(FILTER_SOURCE_FILES "")
SET(BACKEND_LIBRARIES "")
SET(DECODER_LIBRARIES "")
SET(FILTER_LIBRARIES "")
SET(DECODER_NAMES "")

SET(MSVC_DEBUG_TAG)
SET(MSVC_OPTIMIZED_TAG)
IF(MSVC)
	SET(MSVC_DEBUG_TAG debug)
	SET(MSVC_OPTIMIZED_TAG optimized)
ENDIF(MSVC)

#First set up everything for all BackEnds
IF(PORTAUDIO_FOUND AND PORTAUDIO_DEBUG_FOUND) #PortAudio backend
	SET(BACKEND_SOURCE_FILES ${BACKEND_SOURCE_FILES}
		backend_portaudio.h
		backend_portaudio.cpp
	)
	INCLUDE_DIRECTORIES(${PORTAUDIO_INCLUDE_DIR})
	ADD_DEFINITIONS(-DPORTAUDIO_BACKEND)
	SET(BACKEND_LIBRARIES ${BACKEND_LIBRARIES} ${MSVC_DEBUG_TAG} ${PORTAUDIO_DEBUG_LIBRARY} ${MSVC_OPTIMIZED_TAG} ${PORTAUDIO_LIBRARY})
ENDIF(PORTAUDIO_FOUND AND PORTAUDIO_DEBUG_FOUND)

SET(ENABLE_MENCODER_DECODER OFF CACHE BOOL "Enable building of the mencoder decoder")

IF(ENABLE_MENCODER_DECODER)
	SET(DECODER_NAMES ${DECODER_NAMES} Mencoder)
	SET(DECODER_SOURCE_FILES ${DECODER_SOURCE_FILES}
		../libexecstream/exec-stream.cpp ../libexecstream/exec-stream.h
	)
ENDIF(ENABLE_MENCODER_DECODER)

# Set up all demuxer before the decoders to prevent the
# decoders from detecting encapsulated data
IF(LIBOGG_FOUND AND LIBOGG_DEBUG_FOUND) # Xiph.org OGG decoder (demuxer really)
	SET(DECODER_NAMES ${DECODER_NAMES} OGG)
	INCLUDE_DIRECTORIES(${LIBOGG_INCLUDE_DIR})
	# The OGG decoder has a bundled datasource, since it
	# is not really a decoder but a demuxer
	SET(DECODER_SOURCE_FILES ${DECODER_SOURCE_FILES}
		datasource_oggstream.cpp datasource_oggstream.h
	)
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_DEBUG_TAG} ${LIBOGG_DEBUG_LIBRARY} ${MSVC_OPTIMIZED_TAG} ${LIBOGG_LIBRARY})
ENDIF(LIBOGG_FOUND AND LIBOGG_DEBUG_FOUND)

# Now set up all decoders
IF(LIBFAAD2_FOUND AND LIBFAAD2_DEBUG_FOUND) # http://www.audiocoding.com/faad2.html
	SET(DECODER_NAMES ${DECODER_NAMES} AAC)
	INCLUDE_DIRECTORIES(${LIBFAAD2_INCLUDE_DIR})
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_DEBUG_TAG} ${LIBFAAD2_DEBUG_LIBRARY} ${MSVC_OPTIMIZED_TAG} ${LIBFAAD2_LIBRARY})
ENDIF(LIBFAAD2_FOUND AND LIBFAAD2_DEBUG_FOUND)

IF(LIBDUMB_FOUND AND LIBDUMB_DEBUG_FOUND) # http://dumb.sourceforge.net/
	SET(DECODER_NAMES ${DECODER_NAMES} DUMB)
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_DEBUG_TAG} ${LIBDUMB_DEBUG_LIBRARY} ${MSVC_OPTIMIZED_TAG} ${LIBDUMB_LIBRARY})
	INCLUDE_DIRECTORIES(${LIBDUMB_INCLUDE_DIR})
ENDIF(LIBDUMB_FOUND AND LIBDUMB_DEBUG_FOUND)

IF(LIBMAD_FOUND AND LIBMAD_DEBUG_FOUND) # MAD MP3 decoder
	SET(DECODER_NAMES ${DECODER_NAMES} Mad)
	INCLUDE_DIRECTORIES(${LIBMAD_INCLUDE_DIR})
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_DEBUG_TAG} ${LIBMAD_DEBUG_LIBRARY} ${MSVC_OPTIMIZED_TAG} ${LIBMAD_LIBRARY})
ENDIF(LIBMAD_FOUND AND LIBMAD_DEBUG_FOUND)

IF(LIBVORBIS_FOUND AND LIBVORBIS_DEBUG_FOUND) # Xiph.org Vorbis decoder
	SET(DECODER_NAMES ${DECODER_NAMES} Vorbis)
	INCLUDE_DIRECTORIES(${LIBVORBIS_INCLUDE_DIR})
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_DEBUG_TAG} ${LIBVORBIS_DEBUG_LIBRARY} ${MSVC_OPTIMIZED_TAG} ${LIBVORBIS_LIBRARY})
ENDIF(LIBVORBIS_FOUND AND LIBVORBIS_DEBUG_FOUND)

IF(LIBVORBISFILE_FOUND AND LIBOGG_FOUND AND LIBOGG_DEBUG_FOUND AND LIBVORBIS_FOUND AND LIBVORBIS_DEBUG_FOUND)
	SET(DECODER_NAMES ${DECODER_NAMES} OGGVorbisFile)
	INCLUDE_DIRECTORIES(${LIBOGG_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(${LIBVORBIS_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(${LIBVORBISFILE_INCLUDE_DIR})
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_DEBUG_TAG}     ${LIBOGG_DEBUG_LIBRARY} ${MSVC_DEBUG_TAG}     ${LIBVORBIS_DEBUG_LIBRARY} ${MSVC_DEBUG_TAG} ${LIBVORBISFILE_DEBUG_LIBRARY})
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_OPTIMIZED_TAG} ${LIBOGG_LIBRARY}       ${MSVC_OPTIMIZED_TAG} ${LIBVORBIS_LIBRARY}       ${MSVC_OPTIMIZED_TAG} ${LIBVORBISFILE_LIBRARY})
ENDIF(LIBVORBISFILE_FOUND AND LIBOGG_FOUND AND LIBOGG_DEBUG_FOUND AND LIBVORBIS_FOUND AND LIBVORBIS_DEBUG_FOUND)

IF(LIBFLAC_FOUND AND LIBFLACPP_FOUND AND LIBFLAC_DEBUG_FOUND AND LIBFLACPP_DEBUG_FOUND)
	SET(DECODER_NAMES ${DECODER_NAMES} Flac)
	INCLUDE_DIRECTORIES(${LIBFLAC_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(${LIBFLACPP_INCLUDE_DIR})
	# link statically by default
	ADD_DEFINITIONS(-DFLAC__NO_DLL)
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_DEBUG_TAG}     ${LIBFLAC_DEBUG_LIBRARY} ${MSVC_DEBUG_TAG}     ${LIBFLACPP_DEBUG_LIBRARY})
	SET(DECODER_LIBRARIES ${DECODER_LIBRARIES} ${MSVC_OPTIMIZED_TAG} ${LIBFLAC_LIBRARY}       ${MSVC_OPTIMIZED_TAG} ${LIBFLACPP_LIBRARY})
ENDIF(LIBFLAC_FOUND AND LIBFLACPP_FOUND AND LIBFLAC_DEBUG_FOUND AND LIBFLACPP_DEBUG_FOUND)

IF(LIBSAMPLERATE_FOUND AND LIBSAMPLERATE_DEBUG_FOUND)
	SET(FILTER_SOURCE_FILES ${FILTER_SOURCE_FILES}
		filter_libsamplerate.h
		filter_libsamplerate.cpp
	)	
	INCLUDE_DIRECTORIES(${LIBSAMPLERATE_INCLUDE_DIR})
	ADD_DEFINITIONS(-DLIBSAMPLERATE_FILTER)
	SET(FILTER_LIBRARIES ${FILTER_LIBRARIES} ${MSVC_DEBUG_TAG} ${LIBSAMPLERATE_DEBUG_LIBRARY} ${MSVC_OPTIMIZED_TAG} ${LIBSAMPLERATE_LIBRARY})
ENDIF(LIBSAMPLERATE_FOUND AND LIBSAMPLERATE_DEBUG_FOUND)

# we can always compile the wave decoder, no libs needed for that
SET(DECODER_NAMES ${DECODER_NAMES} Wave)

# configure all decoders
SET(FName ${CMAKE_CURRENT_BINARY_DIR}/decoder_linker.inc)
FILE(WRITE "${FName}" "\n")
#MESSAGE("${FName}")
FOREACH(name ${DECODER_NAMES})
	STRING(TOLOWER ${name} lname)
	FILE(APPEND "${FName}" "#include <decoder_${lname}.h>\n")
	FILE(APPEND "${FName}" "REGISTER_DECODER_CLASS(${name}Decoder);\n")
	SET(DECODER_SOURCE_FILES ${DECODER_SOURCE_FILES}
		decoder_${lname}.h
		decoder_${lname}.cpp
	)
ENDFOREACH(name)

include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# Finally declare all files to CMake
ADD_LIBRARY(mpmp_audio
	audiosource_interface.h
	backend_interface.h
	datasource_interface.h
	decoder_interface.h           decoder_interface.cpp

	audio_controller.h            audio_controller.cpp

	backend_wavwriter.h           backend_wavwriter.cpp

	datasource_filereader.h       datasource_filereader.cpp
	datasource_httpstream.h       datasource_httpstream.cpp
	datasource_resetbuffer.h      datasource_resetbuffer.cpp

	filter_sampledoubler.h        filter_sampledoubler.cpp
	filter_sampleconverter.h      filter_sampleconverter.cpp
	filter_reformat.h             filter_reformat.cpp
	filter_monotostereo.h         filter_monotostereo.cpp
	filter_iir.h                  filter_iir.cpp
	filter_split.h                filter_split.cpp
	filter_normalize.h            filter_normalize.cpp

	${BACKEND_SOURCE_FILES}
	${DECODER_SOURCE_FILES}
	${FILTER_SOURCE_FILES}
)

# Set link properties of mpmp_audio (only needed when ADD_LIBRARY(mpmp_audio) above
# does not contain any source files, but only headers
SET_TARGET_PROPERTIES(mpmp_audio PROPERTIES LINKER_LANGUAGE CXX)

# Define libraries that we link against
TARGET_LINK_LIBRARIES(mpmp_audio
	${BACKEND_LIBRARIES}
	${DECODER_LIBRARIES}
	${FILTER_LIBRARIES}
)

IF(WIN32)
	TARGET_LINK_LIBRARIES(mpmp_audio
		ws2_32
	)
ENDIF(WIN32)
